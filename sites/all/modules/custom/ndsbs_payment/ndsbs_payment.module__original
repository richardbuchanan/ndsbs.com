<?php

/**
 * @file
 * Module name ndsbs_payment.module
 * Finoit Technologies
 * Developer krishna@finoit.com
 * Allows developer to customize the site's functionality.
 */
/*
 *  Implementation of hook_menu()
 *  Function ndsbs_custom_menu() defined
 *  Parameter no
 */
function ndsbs_payment_menu() {
    $items = array();
    $items['user/payment'] = array(
        'title' => 'Payment',
        'description' => 'Payment.',
        'access callback' => 'user_is_logged_in',
        'page callback' => '_user_payment',
        'access arguments' => array('access content'),
    );
    
    $items['user/cart/nid/%/tid/%'] = array(
        'title' => 'User Cart',
        'description' => 'User Cart',
        'access callback' => 'user_is_logged_in',
        'page callback' => '_add_cart_items',
        'page arguments' => array(3, 5),
        'access arguments' => array('access content'),
    );

    $items['user/special/assessment'] = array(
        'title'           => 'Special Assessments',
        'description'     => 'List All Special Assessment.',
        'access callback' => 'user_is_logged_in',
        'page callback'   => '_user_special_assessment',
        'access arguments' => array('access content'),
    );
    
    $items['special/assessment/payment'] = array(
        'title'           => 'Special Assessments Payment',
        'description'     => 'Special Assessments Payment.',
        'access callback' => 'user_is_logged_in',
        'page callback'   => '_user_special_assessment_payment_request',
        'access arguments' => array('access content'),
    );

    $items['request/assessment/invoice'] = array(
        'title'           => 'Assessment Invoice',
        'description'     => 'Create Assessment Invoice.',
        'access callback' => 'request_permission',
        'page callback'   => '_request_assessment_invoice',
        'access arguments' => array('access content'),
    );
    
    $items['request/assessment/createinvoice/%/%/%'] = array(
        'title'           => 'Assessment Invoice',
        'description'     => 'Create Assessment Invoice.',
        'access callback' => 'request_permission',
        'page callback'   => '_assessment_form_createinvoice',
        'access arguments' => array('access content'),
    );
        
    return $items;
}

/*
 *  Implementation of hook_theme()
 *  Function ndsbs_custom_theme() defined
 *  Parameter no
 */
function ndsbs_payment_theme() {
    $items = array();
    $items['payment'] = array(
        'render element' => 'form',
        'path' => drupal_get_path('theme', 'bootstrap_ndsbs') . '/templates',
        'template' => 'payment',
    );
    $items['user_special_assessment'] = array(
        'render element' => 'form',
        'path' => drupal_get_path('theme', 'bootstrap_ndsbs') . '/templates',
        'template' => 'user_special_assessment',
    );
    $items['user_special_assessment_payment'] = array(
        'render element' => 'form',
        'path' => drupal_get_path('theme', 'bootstrap_ndsbs') . '/templates',
        'template' => 'user_special_assessment_payment',
    );
    $items['request_assessment_invoice'] = array(
        'render element' => 'form',
        'path' => drupal_get_path('theme', 'bootstrap_ndsbs') . '/templates',
        'template' => 'request_assessment_invoice',
    );

    return $items;
}

/*
 *  Implementation of _user_change_password_custom()
 *  Function _user_change_password_custom() defined
 *  To change the user password
 *  Parameter no
 */
function _user_payment() {
    return theme('payment');
}

/**
 * Implementation of _user_special_assessment()
 * 
 */
function _user_special_assessment() {
    return theme('user_special_assessment');
}

/**
 * Implementation of _user_special_assessment_payment_request()
 * 
 */
function _user_special_assessment_payment_request() {
    return theme('user_special_assessment_payment');
}

/**
 * Function _request_assessment_invoice() define to call the theme
 */
function _request_assessment_invoice() {
    return theme('request_assessment_invoice');
}

/**
 * Function save_transaction_data() Implemented
 * To save the orders into db
 */
function save_transaction_data($nid, $term_num, $uid, $amount, $txn_id, $transaction_data, $payment_status, $shipping_info, $payment_method, $express_mail) {
    $queryinsert = db_insert('users_transactions')
            ->fields(array(
                'nid' => $nid,
                'tid' => $term_num,
                'uid' => $uid,
                'cost' => $amount,
                'payment_status' => $payment_status,
                'payment_method' => $payment_method,
                'order_date' => time(),
                'transaction_id' => $txn_id,
                'shipping_info' => $shipping_info,
                'express_mail' => $express_mail,
                'ip_address' => ip_address(),
                'transaction_data' => $transaction_data,
                
                'transaction_action' => '0',
                'action_by' => '0',
                'reason' => '',
                'action_date' => '0',
                'client_request' => '0',
                'requested_on' => '0',
            ));

    $order_id = $queryinsert->execute();
    
    //  Change the payment status in case of purchased special assessment
    $field_options = array();
    $field_options['payment_status'] = $payment_status;
    $result = db_update('assessment_special_request');
    $result->fields($field_options);
    $result->condition('nid', $nid, '=');
    $result->condition('request_by', $uid, '=');
    $result->condition('session_id', session_id(), '=');
    $result->execute();

    //  Notify the user about the order
    if($payment_status == 1){
       ndsbs_payment_order_confirmation_mail($order_id, $nid, $uid, $amount, $payment_status, $payment_method, $shipping_info);
    }
    return $order_id;
}

/**
 * Function implemented to save record in to transaction table
 * 
 * @param type $oid
 * @param type $term_tid_cost
 */
function save_transaction_terms($oid, $main_report_id, $term_tid_cost, $uid, $payment_status) {
    foreach($term_tid_cost as $key => $value) {
        db_insert('users_transactions_data')
            ->fields(array('oid' => $oid, 'termid' => $key, 'amount' => $value['amount'], 'notary_cost' => $value['notary_amount'], 'sub_report' => $value['sub_report'], 'main_report_id' => $main_report_id))
            ->execute();

        //  Change the stateform payment status
        //  Status of the stateform will depend on the main report term is and state for term id
        $stateform = update_stateform_payment_status_info_report($uid, $main_report_id, $key);
        foreach($stateform as $data) {
            $node_data = node_load($data->nid);
            $node_data->field_state_form_payment_status['und'][0]['value'] = $payment_status;
            $node_data->field_state_form_transid['und'][0]['value'] = $oid;
            node_save($node_data);
        }
    }
    return;
}

/**
 * Function order_confirmation_mail() implemented to send the 
 * confiramtion mail to user
 * @param type $order_id
 * @param type $nid
 * @param type $uid
 * @param type $amount
 * @param type $payment_status
 * @param type $payment_method
 * @param type $shipping_info 
 */
function ndsbs_payment_order_confirmation_mail($order_id, $nid, $uid, $amount, $payment_status, $payment_method, $shipping_info) {
    $user_information = user_load($uid);
    $node_information = node_load($nid);
    
    $message_text = "<style type='text/css'>
        .text {font-family: Arial, Helvetica, sans-serif;
                font-size: 11px;
                line-height: 16px;
                color: #565556;
                text-decoration: none;}
            </style>";
    $message_text = $message_text . "<table width='800' border='0' cellpadding='0' cellspacing='0' class='text' align='center'>
    <tr>
        <td valign='top'>
            <div align='center'> <strong class='heading'><font color='#0066CC'>Thanks for your order.</font> </strong></div>
            <div align='center'><h3 style='color:red'>ORDER NUMBER:  " . $order_id . " </h3></div>
            <div align='justify'>
            <table width='100%' border='0' cellpadding='5' cellspacing='0' bordercolor='#F8F8F8' class='text'>
                <tr>
                    <td width='100%' valign='top' colspan='2'>
                        <table width='100%' border='0' cellpadding='5' cellspacing='0' class='text'>
                            <tr>
                                <td bgcolor='#CFCECD'><strong>Order Details</strong></td>
                            </tr>
                            <tr>
                                <td>
                                    <table width='100%' border='0' cellpadding='5' cellspacing='0' class='text'>
                                        <tr>
                                            <td width='150'><strong>USER</strong></td>
                                            <td><strong>" . $user_information->mail . "</strong></td>
                                        </tr>
                                        <tr>
                                            <td width='150'><strong>Service Purchased</strong></td>
                                            <td><strong>" . $node_information->field_assessment_title['und'][0]['value'] . "</strong></td>
                                        </tr>
                                        <tr>
                                            <td width='150'><strong>Shipping Details</strong></td>
                                            <td><strong>" . $shipping_info . "</strong></td>
                                        </tr>
                                        <tr>
                                            <td><strong>Grand Total</strong></td>
                                            <td>$" . number_format($amount, 2) . "</td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
                <tr>
                    <td width='50%'>
                        <table width='100%' border='0' cellpadding='5' cellspacing='0' class='text'>
                            <tr>
                                <td bgcolor='#CFCECD'><strong>Billing Details</strong></td>
                            </tr>
                            <tr>
                                <td>
                                    <table width='100%' border='0' cellpadding='5' cellspacing='0' class='text'>
                                        <tr>
                                            <td width='150'><strong>First Name</strong></td>
                                            <td>" . $user_information->field_first_name['und'][0]['value'] . "</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Last Name</strong></td>
                                            <td>" . $user_information->field_last_name['und'][0]['value'] . "</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Address1</strong></td>
                                            <td>" . $user_information->	field_address['und'][0]['value'] . "</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Address2</strong></td>
                                            <td>" . $user_information->field_last_name['und'][0]['value'] . "</td>
                                        </tr>
                                        <tr>
                                            <td><strong>City</strong></td>
                                            <td>" . $user_information->field_city['und'][0]['value'] . "</td>
                                        </tr>
                                        <tr>
                                            <td><strong>State</strong></td>
                                            <td>" . $user_information->field_state['und'][0]['value'] . "</td>
                                        </tr>
                                        <tr>
                                            <td><strong>Zip Code</strong></td>
                                            <td>" . $user_information->field_zip['und'][0]['value'] . "</td>
                                        </tr>
                                    </table>
                                </td>
                            </tr>
                        </table>
                    </td>
                </tr>
            </table>
        </div>
        </td>
    </tr>
    </table>";

    ////////////
    $module = 'ndsbs_payment';
    $key = 'order_confirmation_mail';
    $to = $user_information->mail;
    $language = $user_information->language;
    $message = drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = FALSE);

    //  Creating the message body
    $message['subject'] = 'Order Confirmation mail from NDSBS';
    $message['body'] = array();
    $message['body'][] = $message_text;
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);

    // Format the message body.
    $message = $system->format($message);

    // Send e-mail.
    $message['result'] = $system->mail($message);
    if(!$message['result']) {
        watchdog($module, 'Unable to send the email hook_order_confirmation_mail', array(), WATCHDOG_NOTICE);
    }
    ////////////
}

/**
 * Function _add_cart_items() Implemented to 
 * save the items into the cart
 */
function _add_cart_items($nid, $tid) {
    global $user;
    //  First delete the cart items
    delete_cart_items();
    $queryinsert = db_insert('users_cart')
            ->fields(array(
                'uid' => $user->uid,
                'nid' => $nid,
                'tid' => $tid,
                'sess_id' => session_id(),
            ));
    $queryinsert->execute();
    drupal_goto('user/payment');
}

/**
 *  Function implemented to get the cart items
 */
function get_cart_items() {
    global $user;
    $queryselect = db_select('users_cart', 'uc')
                    ->fields(uc, array('uid', 'nid', 'tid', 'notary_amount', 'shipping_address', 'sub_report', 'express_mail'))
                    ->condition('uc.uid', $user->uid, '=')
                    ->condition('uc.sess_id', session_id(), '=')
                    ->orderBy('cid', 'DESC');
    $result = $queryselect->execute();
    $data = $result->fetchAll();
    return $data;
}

/**
 *  Function delete_cart_items() Implemeted
 *  To delete the cart items
 */
function delete_cart_items() {
    global $user;
    $sess = session_id();
    $num_deleted = db_delete('users_cart')
                   ->condition('uid', $user->uid)
                   ->condition('sess_id', $sess)
                   ->execute();
    return;
}

/**
 * Function special_assessment_form_selection()
 * @return type
 */
function special_assessment_form_selection() {
    return drupal_get_form('list_all_assessments_for_special_user');
}

/**
 * Function implemented to get the all assessment for user
 * To make request 
 * 
 * @return string
 */
function list_all_assessments_for_special_user() {
    //  Get the all assessment and create the assessment Link
    $val_asmnt = get_all_assessment();
    $nid_array_asmnt = array();
    foreach ($val_asmnt as $data_asmnt) {
        $nid_array_asmnt[] = $data_asmnt->nid;
    }
    //  load the node data
    $result_asmnt = node_load_multiple($nid_array_asmnt);
    foreach($result_asmnt as $rec_asmnt) {
        if($rec_asmnt->field_assessment_status['und'][0]['value'] == 'Active') {
            //$assessment_alias = drupal_lookup_path('alias', "node/".$rec_asmnt->nid);
            //print '<li><a href="' . $base_url . '/' . $assessment_alias . '" title="'.$rec_asmnt->field_assessment_title['und'][0]['value'].'">' . $rec_asmnt->field_assessment_title['und'][0]['value'] . '</a></li>';
            //print '<li><a href="' . $base_url . '/node/160/nid/' . $rec_asmnt->nid . '" title="'.$rec_asmnt->field_assessment_title['und'][0]['value'].'">' . $rec_asmnt->field_assessment_title['und'][0]['value'] . '</a></li>';
            $service_dropdown[''] = '--Select--';
            $service_dropdown[$rec_asmnt->nid] = $rec_asmnt->field_assessment_title['und'][0]['value'];
        }
    }

    //  creating dropdown
    $form['get_special_assessment'] = array(
        '#name' => 'get_special_assessment',
        '#id' => 'get_special_assessment',
        '#type' => 'select',
        '#title' => t('Select an assessment:'),
        '#options' => $service_dropdown,
        //'#default_value' => arg(3) . '||' . arg(5),
        '#required' => TRUE,
        '#attributes' => array('class' => array('select_box wd_250 mlr_12')),
        '#prefix' => '<div class="request3">',
    );
    
    //  creating dropdown category values
/*    $form['btn_get_details'] = array(
        '#type' => 'submit',
        '#name' => 'get_details',
        '#id' => 'get_details',
        '#value' => t('Submit Request'),
        '#attributes' => array('class' => array('brown_btn', 'specialbtn')),
        '#suffix' => '</div>',
    );*/
     $form['btn_get_details'] = array(
        '#type' => 'submit',
        '#name' => 'get_details',
        '#id' => 'get_details',
        '#value' => t('Submit Request'),
        '#attributes' => array('class' => array('brown_btn', 'specialbtn')),
        '#suffix' => '</div>',
    );

    return $form;
}

/**
 * Function list_all_assessments_for_special_user_submit($form, &$form_state)
 * 
 * @param type $form
 */
function list_all_assessments_for_special_user_submit($form, &$form_state) {
    global $user;
    $queryinsert = db_insert('assessment_special_request')
            ->fields(array(
                'nid' => $form_state['values']['get_special_assessment'],
                'request_by' => $user->uid,
                'action_by' => 0,
                'status' => 0,
                'requested_on' => time(),
                'updated_on' => 0,
            ));
    $queryinsert->execute();
    drupal_set_message(t('Thanks. Your request for invoice has been successfully created and sent to NDSBS.'));
}

/**
 * Function get_special_assessment_data_status()
 * implemented to get the cart items
 */
function get_special_assessment_data_status() {
    global $user;
    $queryselect = db_select('assessment_special_request', 'asr')
                    ->fields('asr')
                    ->condition('asr.request_by', $user->uid, '=')
                    ->orderBy('id', 'DESC')
                    ->range(0, 1);
    $result = $queryselect->execute();
    $data = $result->fetchAll();
    return $data;
}

/**
 * Function get_invoiced_form();
 */
function get_invoiced_form() {
    return drupal_get_form('list_invoiced_assessments_for_special_user');
}

/**
 * Function implemented to get the all assessment for user
 * To make request 
 * 
 * @return string
 */
function list_invoiced_assessments_for_special_user() {
    //  Get the all assessment and create the assessment Link
    $val_asmnt = get_all_assessment_by_nid();

    $nid_array_asmnt = array();
    $service_dropdown[''] = '--Select--';
    foreach ($val_asmnt as $data_asmnt) {
        $rec_asmnt = node_load($data_asmnt->nid);
        $service_dropdown[''] = '--Select--';
        $service_dropdown[$rec_asmnt->nid . '||' . $rec_asmnt->field_primary_service['und'][0]['tid'] . '||' . $data_asmnt->id] = $rec_asmnt->field_assessment_title['und'][0]['value'];
    }

    //  creating dropdown
    $form['get_special_assessment'] = array(
        '#name' => 'get_special_assessment',
        '#id' => 'get_special_assessment',
        '#type' => 'select',
        '#title' => t('Select an assessment:'),
        '#options' => $service_dropdown,
        //'#default_value' => arg(3) . '||' . arg(5),
        '#required' => TRUE,
        '#attributes' => array('class' => array('select_box wd_250 mlr_12')),
        '#prefix' => '<div class="request3">',
    );
    
    //  creating dropdown category values
    $form['btn_get_details'] = array(
        '#type' => 'submit',
        '#name' => 'get_details',
        '#id' => 'get_details',
        '#value' => t('Make Payment'),
        '#attributes' => array('class' => array('brown_btn', 'specialbtn')),
        '#suffix' => '</div>',
    );
    return $form;
}

/**
 * Function list_all_assessments_for_special_user_submit($form, &$form_state)
 * 
 * @param type $form
 */
function list_invoiced_assessments_for_special_user_submit($form, &$form_state) {
    global $user, $base_url;
    $data_post = $form_state['values']['get_special_assessment'];
    $data_explode = explode('||', $data_post);
    
    //  Update the special assessment table
    $field_options = array();
    $field_options['session_id'] = session_id();
    $result = db_update('assessment_special_request');
                $result->fields($field_options);
                $result->condition('id', $data_explode[2], '=');
                $result->execute();
                
    $field_options['session_id'] = 0;
    $result = db_update('assessment_special_request');
                $result->fields($field_options);
                $result->condition('id', $data_explode[2], '!=');
                $result->execute();

    drupal_goto($base_url . '/user/cart/nid/'.$data_explode[0].'/tid/'.$data_explode[1]);
}

/**
 * Function get_all_assessment_by_nid() define.
 * function implemented for getting the all assessment created by Super Admin
 */
function get_all_assessment_by_nid() {
    global $user;
    //  Query to get the all node of paper work base on particular user
    $result = db_select('assessment_special_request', 'n')
                        ->fields('n')
                        ->condition('n.request_by', $user->uid, '=')
                        ->condition('n.payment_status', 0, '=')
                        ->condition('n.status', 1, '=');
    $excute = $result->execute();
    $result = $excute->fetchAll();
    return $result;
}

/**
 * Function get_all_assessment_invoice() define.
 * Depends on the user id of the client
 */
function get_all_assessment_invoice() {
    $result = db_select('assessment_special_request', 'n')
                        ->fields('n')
                        ->orderBy('requested_on', 'DESC');
    $excute = $result->execute();
    $result = $excute->fetchAll();
    return $result;
}

/**
 * Function _assessment_form_createinvoice() define.
 * function implemented for assign the amount to the state form
 */
function _assessment_form_createinvoice() {
    $output = '';
    $output .= drupal_render(drupal_get_form('assessment_form_create_invoice'));
    print $output;
}

/**
 * Function state_form_create_invoice() defined to 
 * Create the Custom form
 * @return string 
 */
function assessment_form_create_invoice() {
    //  creating dropdown category values
    $form['invoice_amount'] = array(
        '#type' => 'textfield',
        '#title' => t('Enter amount'),
        '#required' => true,
    );

    $form['submit'] = array(
        '#type' => 'submit',
        '#value' => t('Submit')
    );
    return $form;
}

/**
 *  Validate the create invoice form
 */
function assessment_form_create_invoice_validate(&$form, &$form_state) {
    if($form_state['values']['invoice_amount'] == '') {
        form_set_error('invoice_amount', t('Please enter the cost.'));
    }
}

/**
 * Submit the create invoice form
 */
function assessment_form_create_invoice_submit(&$form, &$form_state) {
    global $user;
    $nid = arg(3);
    $uid = arg(4);
    $aid = arg(5);  // pk of the table

    $field_options = array();
    $field_options['special_amount'] = $form_state['values']['invoice_amount'];
    $field_options['updated_on'] = time();
    $field_options['action_by'] = $user->uid;
    $field_options['status'] = 1;

    //  Db update the change the assessment custom price
    $result = db_update('assessment_special_request');
                $result->fields($field_options);
                $result->condition('id', $aid, '=');
                $result->execute();
    //  Send Email (Invoice to the customer)
    ndsbs_payment_assessment_form_create_invoice_mail($nid, $uid, $form_state['values']['invoice_amount']);

    // Inform the user.
    drupal_set_message(t('Invoice has been generated and sent to client.'));
    echo '<script>window.opener.location.reload(true);window.close();</script>';
    exit();
}

/**
 * Implementation of function ndsbs_payment_assessment_form_create_invoice_mail()
 * Parameter: user account info
 * Desc: Save the record into the database with status 1
 */
function ndsbs_payment_assessment_form_create_invoice_mail($nid, $uid, $amount) {
    global $base_url;
    $node = node_load($nid);
    $client_user = user_load($uid);

    $module = 'ndsbs_payment';
    $key = 'assessment_form_create_invoice_mail';
    $to = $client_user->mail;
    $language = $client_user->language;

    $message = drupal_mail($module, $key, $to, $language, $params = array(), $from = NULL, $send = FALSE);

    //  Creating the message body
    $message['subject'] = 'Invoice for Special Assessment or Rush Order Services';
    $message['body'] = array();
    $message['body'][] = 'Hi ' . $client_user->field_first_name['und'][0]['value'] . ', <br /><br />';
    $message['body'][] = 'Your special invoice/rush order request has been processed by NDSBS. Your request was for ' . $node->field_assessment_title['und'][0]['value'] . '.<br />';
    $message['body'][] = 'The updated price for your servicec is: $' . $amount . '<br />';
    $message['body'][] = 'You must first log into your account and then <a href="' . $base_url . '/special/assessment/payment">click here</a> to make payment.<br /><br />';
    $message['body'][] = 'If you have any questions please contact us directly at 614-888-7274 (9-5 EST) or email us at info@ndsbs.com<br /><br />';
    $message['body'][] = 'The New Directions Team.';
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed';

    // Retrieve the responsible implementation for this message.
    $system = drupal_mail_system($module, $key);
 
    // Format the message body.
    $message = $system->format($message);
 
    // Send e-mail.
    $message['result'] = $system->mail($message);
    if(!$message['result']) {
        watchdog($module, 'Unable to send the email hook_state_form_invoice_mail', array(), WATCHDOG_NOTICE);
    }
}

/**
 * Implementation of get_special_assessment_custom_amount()
 * 
 * @global type $user
 * @param type $nid
 */
function get_special_assessment_custom_amount($nid) {
    global $user;
    $result = db_select('assessment_special_request', 'n')
                        ->fields('n', array('special_amount'))
                        ->condition('n.request_by', $user->uid, '=')
                        ->condition('n.payment_status', 0, '=')
                        ->condition('n.nid', $nid, '=')
                        ->condition('n.status', 1, '=');
    $excute = $result->execute();
    $result = $excute->fetchAll();
    return $result[0]->special_amount;
}

