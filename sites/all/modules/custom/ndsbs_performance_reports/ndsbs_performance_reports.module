<?php

/**
 * @file
 * NDSBS Performance Reports
 *
 * Allows administrators and therapists to view and generate perforamnce
 * statistic reports.
 */

/**
 * Implements hook_permission().
 */
function ndsbs_performance_reports_permission() {
  return array(
    'view performance stats' => array(
      'title' => t('View performance statistics'),
      'description' => t('Permission to view performance statistics.'),
    ),
  );
}

/**
 * Page callback: Displays the monthly performance statistics dashboard.
 */
function ndsbs_performance_reports_dashboard() {
  $filters = $_SESSION['performance_filters'];
  $start = mktime(0, 0, 0, $filters['month'], 1, $filters['year']);
  $end = mktime(23, 59, 59, $filters['month'] + 1, 0, $filters['year']);
  $therapist = $filters['therapist'];
  $transactions = ndsbs_performance_reports_get_transactions($start, $end);

  $output = '<div class="row">';

  $performance_report_filters = drupal_get_form('performance_report_filters');
  $output .= '<div class="col-xs-12">';
  $output .= drupal_render($performance_report_filters);
  $output .= '</div>';

  $output .= '<div class="col-xs-12 col-md-9">';
  $output .= drupal_render(performance_report_transactions__monthly($transactions, $therapist));
  $output .= '</div>';

  $output .= '<div class="col-xs-12 col-md-3">';
  $output .= drupal_render(performance_report_therapist_transactions($transactions, $therapist));
  $output .= '</div>';

  $output .= '</div>';
  return $output;
}

/**
 * Page callback: Displays the advanced performance statistics dashboard.
 */
function ndsbs_performance_reports_dashboard_advanced() {
  drupal_add_js('//www.gstatic.com/charts/loader.js', array(
    'type' => 'external',
    'group' => JS_DEFAULT,
  ));

  $filters = $_SESSION['performance_filters_advanced'];
  $start = mktime(0, 0, 0, $filters['month_start'], 1, $filters['year_start']);
  $end = mktime(23, 59, 59, $filters['month_end'] + 1, 0, $filters['year_end']);
  $therapist = $filters['therapist'];
  $transactions = ndsbs_performance_reports_get_transactions($start, $end);

  $output = '<div class="row">';

  $performance_report_filters = drupal_get_form('performance_report_filters');
  $output .= '<div class="col-xs-12">';
  $output .= drupal_render($performance_report_filters);
  $output .= '</div>';

  $output .= '<div class="col-xs-12 col-md-3">';
  $output .= drupal_render(performance_report_transactions__advanced($transactions, $therapist));
  $output .= '</div>';

  $output .= '<div class="col-xs-12 col-md-3">';
  $output .= '<div id="chart"></div>';
  $output .= '</div>';

  $output .= '</div>';
  return $output;
}

function performance_report_filters($form, &$form_state) {
  global $user;
  $therapists = array();
  $stats_access = user_can_view_stats();
  $therapist_user = user_load($user->uid);

  if (!isset($_SESSION['performance_filters'])) {
    if ($stats_access == 'all') {
      $_SESSION['performance_filters'] = array(
        'month' => date('n'),
        'year' => date('Y'),
        'therapist' => 'all',
        'reset' => 0,
      );
    }
    elseif ($stats_access == 'own') {
      $_SESSION['performance_filters'] = array(
        'month' => date('n'),
        'year' => date('Y'),
        'therapist' => $therapist_user->uid,
        'reset' => 0,
      );
    }
  }

  if (!isset($_SESSION['performance_filters_advanced'])) {
    if ($stats_access == 'all') {
      $_SESSION['performance_filters_advanced'] = array(
        'month_start' => date('n'),
        'month_end' => date('n'),
        'year_start' => date('Y'),
        'year_end' => date('Y'),
        'therapist' => 'all',
        'reset' => 0,
      );
    }
    elseif ($stats_access == 'own') {
      $_SESSION['performance_filters_advanced'] = array(
        'month_start' => date('n'),
        'month_end' => date('n'),
        'year_start' => date('Y'),
        'year_end' => date('Y'),
        'therapist' => $therapist_user->uid,
        'reset' => 0,
      );
    }
  }

  $query = db_select('users', 'u');
  $query->fields('u', array('uid'))
    ->condition('u.status', 1, '=')
    ->orderBy('u.uid', 'ASC');
  $query->join('users_roles', 'users_roles', 'users_roles.uid = u.uid');
  $query->condition('users_roles.rid', 4, '=');
  $result = $query->execute();
  $data = $result->fetchAll();

  if ($stats_access == 'all') {
    $therapists['all'] = '- All -';
    $therapists[0] = 'Unassigned';
  }

  if ($stats_access == 'all') {
    foreach ($data as $user_data) {
      $user_info = user_load($user_data->uid);
      $therapists[$user_data->uid] = $user_info->field_first_name['und'][0]['value'] . ' ' . $user_info->field_last_name['und'][0]['value'];
    }
  }
  elseif ($stats_access == 'own') {
    $therapists[$therapist_user->uid] = $therapist_user->field_first_name['und'][0]['value'] . ' ' . $therapist_user->field_last_name['und'][0]['value'];
  }

  $months = array();
  $years = array();

  for ($m=1; $m<=12; ++$m) {
    $months[$m] = date('F', mktime(0, 0, 0, $m, 1));
  }

  $y = 2013;

  while ($y <= date('Y')) {
    $years[$y] = $y;
    $y++;
  }

  $path = explode('/', current_path());
  if (!isset($path[3])) {
    $form['months'] = [
      '#type' => 'select',
      '#title' => t('Month'),
      '#options' => $months,
      '#default_value' => $_SESSION['performance_filters']['month'],
    ];
    $form['years'] = [
      '#type' => 'select',
      '#title' => t('Year'),
      '#options' => $years,
      '#default_value' => $_SESSION['performance_filters']['year'],
    ];
  }
  else {
    $form['date_begin'] = [
      '#type' => 'fieldset',
      '#title' => t('Begin date'),
      '#attributes' => array(
        'class' => array('col-md-3'),
      ),
    ];
    $form['date_begin']['month_start'] = [
      '#type' => 'select',
      '#title' => t('Month'),
      '#options' => $months,
      '#default_value' => $_SESSION['performance_filters_advanced']['month_start'],
    ];
    $form['date_begin']['year_start'] = [
      '#type' => 'select',
      '#title' => t('Year'),
      '#options' => $years,
      '#default_value' => $_SESSION['performance_filters_advanced']['year_start'],
    ];
    $form['date_end'] = [
      '#type' => 'fieldset',
      '#title' => t('End date'),
      '#attributes' => array(
        'class' => array('col-md-3'),
      ),
    ];
    $form['date_end']['month_end'] = [
      '#type' => 'select',
      '#title' => t('Month'),
      '#options' => $months,
      '#default_value' => $_SESSION['performance_filters_advanced']['month_end'],
    ];
    $form['date_end']['year_end'] = [
      '#type' => 'select',
      '#title' => t('Year'),
      '#options' => $years,
      '#default_value' => $_SESSION['performance_filters_advanced']['year_end'],
    ];
  }

  $form['therapists'] = [
    '#type' => 'select',
    '#title' => t('Therapist'),
    '#options' => $therapists,
    '#default_value' => $_SESSION['performance_filters']['therapist'],
  ];
  $form['submit'] = [
    '#type' => 'submit',
    '#value' => t('Update'),
    '#submit' => ['performance_report_filters_submit'],
  ];

  if ($_SESSION['performance_filters']['reset']) {
    $form['reset'] = array(
      '#type' => 'submit',
      '#value' => t('Reset'),
      '#submit' => array('performance_report_filters_reset'),
    );
  }

  return $form;
}

function performance_report_filters_submit($form, &$form_state) {
  $_SESSION['performance_filters'] = array(
    'month' => $form_state['values']['months'],
    'year' => $form_state['values']['years'],
    'therapist' => $form_state['values']['therapists'],
    'reset' => 1,
  );
  $_SESSION['performance_filters_advanced'] = array(
    'month_start' => $form_state['values']['month_start'],
    'month_end' => $form_state['values']['month_end'],
    'year_start' => $form_state['values']['year_start'],
    'year_end' => $form_state['values']['year_end'],
    'therapist' => $form_state['values']['therapists'],
    'reset' => 1,
  );
}

function performance_report_filters_reset($form, &$form_state) {
  $_SESSION['performance_filters'] = array(
    'month' => date('n'),
    'year' => date('Y'),
    'therapist' => 'all',
    'reset' => 0,
  );
  $_SESSION['performance_filters_advanced'] = array(
    'month_start' => date('n'),
    'month_end' => date('n'),
    'year_start' => date('Y'),
    'year_end' => date('Y'),
    'therapist' => 'all',
    'reset' => 0,
  );
}

/**
 * Displays monthly transactions on the performance statistics page.
 *
 * These transactions detail client details, transaction details, order date and
 * purchase details. Users can filter the details by month, year and therapist.
 */
function performance_report_transactions__monthly($transactions, $therapist = NULL) {
  global $user;
  $amount_total = 0;
  $rush_total = 0;
  $refund_total = 0;
  $totals = 0;
  $stats_access = user_can_view_stats();

  $header = array(
    t('Client details'),
    t('Transaction details'),
    t('Order date'),
    t('Transaction amount'),
  );
  $rows = array();

  foreach ($transactions as $transaction) {
    if ($stats_access == 'own') {
      $therapist = $user->uid;
    }

    if ($therapist == 'all') {
      $assessment = $transaction['assessment'];
      $client = $transaction['client'];
      $order = $transaction['order'];

      $client_details = '<b>' . ucwords($client['name']) . '</b><br>';
      $client_details .= $client['mail'] . '<br>';
      $client_details .= $client['phone'] . '<br>';
      $client_details .= '<b>Therapist</b>: ' . $transaction['therapist']['name'];

      $transaction_details = '<b>Transaction ID</b>: ' . $transaction['transaction_id'] . '<br>';
      $transaction_details .= '<b>Service</b>: ' . $assessment['title'];

      $order_date = $order['date_formatted'];

      $amount = $order['amount'];
      $rush = $order['rush_amount'];
      $refund = $transaction['refunded'] ? $order['amount'] : 0;
      $total = $amount + $rush - $refund;

      $amount_total = $amount_total + $amount;
      $rush_total = $rush_total + $rush;
      $refund_total = $refund_total + $refund;
      $totals = $totals + $total;

      $refund_class = $transaction['refunded'] ? ' text-danger' : '';

      $transaction_amount = '<span class="pull-left"><b>Assessment</b>:</span>';
      $transaction_amount .= '<span class="pull-right">$' . number_format($amount, 2) . '</span><br>';
      $transaction_amount .= '<span class="pull-left"><b>Rush Service</b>:</span>';
      $transaction_amount .= '<span class="pull-right">$' . number_format($rush, 2) . '</span><br>';
      $transaction_amount .= '<span class="pull-left"><b>Refund</b>:</span>';
      $transaction_amount .= '<span class="pull-right' . $refund_class . '">$' . number_format($refund, 2) . '</span><br>';
      $transaction_amount .= '<span class="pull-left"><b>Total</b>:</span>';
      $transaction_amount .= '<span class="pull-right">$' . number_format($total, 2) . '</span>';

      $row = array(
        $client_details,
        $transaction_details,
        $order_date,
        $transaction_amount,
      );

      $rows[] = $row;
    }
    elseif (!$therapist && !$transaction['therapist']['uid']) {
      $assessment = $transaction['assessment'];
      $client = $transaction['client'];
      $order = $transaction['order'];

      $client_details = '<b>' . ucwords($client['name']) . '</b><br>';
      $client_details .= $client['mail'] . '<br>';
      $client_details .= $client['phone'] . '<br>';
      $client_details .= '<b>Therapist</b>: ' . $transaction['therapist']['name'];

      $transaction_details = '<b>Transaction ID</b>: ' . $transaction['transaction_id'] . '<br>';
      $transaction_details .= '<b>Service</b>: ' . $assessment['title'];

      $order_date = $order['date_formatted'];

      $amount = $order['amount'];
      $rush = $order['rush_amount'];
      $refund = $transaction['refunded'] ? $order['amount'] : 0;
      $total = $amount + $rush - $refund;

      $amount_total = $amount_total + $amount;
      $rush_total = $rush_total + $rush;
      $refund_total = $refund_total + $refund;
      $totals = $totals + $total;

      $refund_class = $transaction['refunded'] ? ' text-danger' : '';

      $transaction_amount = '<span class="pull-left"><b>Assessment</b>:</span>';
      $transaction_amount .= '<span class="pull-right">$' . number_format($amount, 2) . '</span><br>';
      $transaction_amount .= '<span class="pull-left"><b>Rush Service</b>:</span>';
      $transaction_amount .= '<span class="pull-right">$' . number_format($rush, 2) . '</span><br>';
      $transaction_amount .= '<span class="pull-left"><b>Refund</b>:</span>';
      $transaction_amount .= '<span class="pull-right' . $refund_class . '">$' . number_format($refund, 2) . '</span><br>';
      $transaction_amount .= '<span class="pull-left"><b>Total</b>:</span>';
      $transaction_amount .= '<span class="pull-right">$' . number_format($total, 2) . '</span>';

      $row = array(
        $client_details,
        $transaction_details,
        $order_date,
        $transaction_amount,
      );

      $rows[] = $row;
    }
    elseif ($therapist == $transaction['therapist']['uid']) {
      $assessment = $transaction['assessment'];
      $client = $transaction['client'];
      $order = $transaction['order'];

      $client_details = '<b>' . ucwords($client['name']) . '</b><br>';
      $client_details .= $client['mail'] . '<br>';
      $client_details .= $client['phone'] . '<br>';
      $client_details .= '<b>Therapist</b>: ' . $transaction['therapist']['name'];

      $transaction_details = '<b>Transaction ID</b>: ' . $transaction['transaction_id'] . '<br>';
      $transaction_details .= '<b>Service</b>: ' . $assessment['title'];

      $order_date = $order['date_formatted'];

      $amount = $order['amount'];
      $rush = $order['rush_amount'];
      $refund = $transaction['refunded'] ? $order['amount'] : 0;
      $total = $amount + $rush - $refund;

      $amount_total = $amount_total + $amount;
      $rush_total = $rush_total + $rush;
      $refund_total = $refund_total + $refund;
      $totals = $totals + $total;

      $refund_class = $transaction['refunded'] ? ' text-danger' : '';

      $transaction_amount = '<span class="pull-left"><b>Assessment</b>:</span>';
      $transaction_amount .= '<span class="pull-right">$' . number_format($amount, 2) . '</span><br>';
      $transaction_amount .= '<span class="pull-left"><b>Rush Service</b>:</span>';
      $transaction_amount .= '<span class="pull-right">$' . number_format($rush, 2) . '</span><br>';
      $transaction_amount .= '<span class="pull-left"><b>Refund</b>:</span>';
      $transaction_amount .= '<span class="pull-right' . $refund_class . '">$' . number_format($refund, 2) . '</span><br>';
      $transaction_amount .= '<span class="pull-left"><b>Total</b>:</span>';
      $transaction_amount .= '<span class="pull-right">$' . number_format($total, 2) . '</span>';

      $row = array(
        $client_details,
        $transaction_details,
        $order_date,
        $transaction_amount,
      );

      $rows[] = $row;
    }
  }

  if (!empty($rows)) {
    $refunds_class = $refund_total > 0 ? ' text-danger' : '';

    $totals_row = '<span class="pull-left"><b>Assessments</b>:</span>';
    $totals_row .= '<span class="pull-right text-success">$' . number_format($amount_total, 2) . '</span><br>';
    $totals_row .= '<span class="pull-left"><b>Rush Services</b>:</span>';
    $totals_row .= '<span class="pull-right text-success">$' . number_format($rush_total, 2) . '</span><br>';
    $totals_row .= '<span class="pull-left"><b>Refunds</b>:</span>';
    $totals_row .= '<span class="pull-right' . $refunds_class . '">$' . number_format($refund_total, 2) . '</span><br>';
    $totals_row .= '<span class="pull-left"><b>Total</b>:</span>';
    $totals_row .= '<span class="pull-right text-success">$' . number_format($totals, 2) . '</span>';

    $rows[] = array(
      '',
      '',
      '',
      $totals_row,
    );
  }

  $dateObjMonth = DateTime::createFromFormat('!m', $_SESSION['performance_filters']['month']);

  return $build['performance_transactions_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No transactions found.'),
    '#caption' => t('<h3>' . $dateObjMonth->format('F') . ' ' . $_SESSION['performance_filters']['year'] . ' Transactions</h3>'),
  );
}

/**
 * Displays advanced transactions on the performance statistics page.
 *
 * These transactions detail transaction details. Users can filter the details
 * by month, year and therapist.
 */
function performance_report_transactions__advanced($transactions, $therapist = NULL) {
  global $user;
  $amount_total = 0;
  $rush_total = 0;
  $refund_total = 0;
  $totals = 0;
  $stats_access = user_can_view_stats();

  $header = array();
  $rows = array();

  foreach ($transactions as $transaction) {
    if ($stats_access == 'own') {
      $therapist = $user->uid;
    }

    if ($therapist == 'all') {
      $order = $transaction['order'];
      $amount = $order['amount'];
      $rush = $order['rush_amount'];
      $refund = $transaction['refunded'] ? $order['amount'] : 0;
      $total = $amount + $rush - $refund;

      $amount_total = $amount_total + $amount;
      $rush_total = $rush_total + $rush;
      $refund_total = $refund_total + $refund;
      $totals = $totals + $total;
    }
    elseif (!$therapist && !$transaction['therapist']['uid']) {
      $order = $transaction['order'];
      $amount = $order['amount'];
      $rush = $order['rush_amount'];
      $refund = $transaction['refunded'] ? $order['amount'] : 0;
      $total = $amount + $rush - $refund;

      $amount_total = $amount_total + $amount;
      $rush_total = $rush_total + $rush;
      $refund_total = $refund_total + $refund;
      $totals = $totals + $total;
    }
    elseif ($therapist == $transaction['therapist']['uid']) {
      $order = $transaction['order'];
      $amount = $order['amount'];
      $rush = $order['rush_amount'];
      $refund = $transaction['refunded'] ? $order['amount'] : 0;
      $total = $amount + $rush - $refund;

      $amount_total = $amount_total + $amount;
      $rush_total = $rush_total + $rush;
      $refund_total = $refund_total + $refund;
      $totals = $totals + $total;
    }
  }

  $refunds_class = $refund_total > 0 ? ' text-danger' : '';

  $totals_row = '<span class="pull-left"><b>Assessments</b>:</span>';
  $totals_row .= '<span class="pull-right text-success">$' . number_format($amount_total, 2) . '</span><br>';
  $totals_row .= '<span class="pull-left"><b>Rush Services</b>:</span>';
  $totals_row .= '<span class="pull-right text-success">$' . number_format($rush_total, 2) . '</span><br>';
  $totals_row .= '<span class="pull-left"><b>Refunds</b>:</span>';
  $totals_row .= '<span class="pull-right' . $refunds_class . '">$' . number_format($refund_total, 2) . '</span><br>';
  $totals_row .= '<span class="pull-left"><b>Total</b>:</span>';
  $totals_row .= '<span class="pull-right text-success">$' . number_format($totals, 2) . '</span>';

  $rows[] = array(
    $totals_row,
  );
  drupal_add_js(array(
    'ndsbs_performance_reports' => array(
      'assessments_total' => $amount_total,
      'rush_total' => $rush_total,
      'totals' => $totals,
  )), array(
    'type' => 'setting',
  ));

  $charts = drupal_get_path('module', 'ndsbs_performance_reports') . '/js/ndsbs-performance-reports.charts.js';
  drupal_add_js($charts, array(
    'type' => 'file',
    'group' => JS_DEFAULT,
  ));

  $dateObjMonth_start = DateTime::createFromFormat('!m', $_SESSION['performance_filters_advanced']['month_start']);
  $dateObjMonth_end = DateTime::createFromFormat('!m', $_SESSION['performance_filters_advanced']['month_end']);
  $month_start = $dateObjMonth_start->format('F') . ' ' . $_SESSION['performance_filters_advanced']['year_start'];
  $month_end = $dateObjMonth_end->format('F') . ' ' . $_SESSION['performance_filters_advanced']['year_end'];

  return $build['performance_transactions_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No transactions found.'),
    '#caption' => t('<h3>' . $month_start . ' - ' . $month_end . ' Transactions</h3>'),
  );
}

/**
 * Displays monthly therapist transactions on the performance statistics page.
 *
 * These transactions detail total transaction dollar amounts and number of
 * assessments a therapist had during a given month. Users can filter the
 * details by month, year and therapist.
 */
function performance_report_therapist_transactions($transactions, $therapist = NULL) {
  global $user;
  $therapists = ndsbs_performance_reports_get_all_therapists();
  $total_amount = 0;
  $total_assessments = 0;
  $stats_access = user_can_view_stats();

  foreach ($therapists as $uid => $_therapist) {
    $therapists[$uid]['total_amount'] = 0;
    $therapists[$uid]['assessment_count'] = 0;
  }

  $header = array(
    t('Therapist'),
    t('Transactions'),
    t('No. of Assessments'),
  );
  $rows = array();

  foreach ($transactions as $transaction) {
    if ($stats_access == 'own') {
      $therapist = $user->uid;
    }

    if ($therapist == 'all') {
      $nid = $transaction['assessment']['nid'];
      $refunded = $transaction['refunded'];

      if (!$refunded && $nid != '2792') {
        $therapist_uid = $transaction['therapist']['uid'];
        $therapists[$therapist_uid]['total_amount'] = $therapists[$therapist_uid]['total_amount'] + $transaction['order']['amount'] + $transaction['order']['rush_amount'];
        $therapists[$therapist_uid]['assessment_count'] = $therapists[$therapist_uid]['assessment_count'] + 1;
        $total_assessments = $total_assessments + 1;
      }
    }
    elseif (!$therapist && !$transaction['therapist']['uid']) {
      $nid = $transaction['assessment']['nid'];
      $refunded = $transaction['refunded'];

      if (!$refunded && $nid != '2792') {
        $therapist_uid = $transaction['therapist']['uid'];
        $therapists[$therapist_uid]['total_amount'] = $therapists[$therapist_uid]['total_amount'] + $transaction['order']['amount'] + $transaction['order']['rush_amount'];
        $therapists[$therapist_uid]['assessment_count'] = $therapists[$therapist_uid]['assessment_count'] + 1;
        $total_assessments = $total_assessments + 1;
      }
    }
    elseif ($therapist == $transaction['therapist']['uid']) {
      $nid = $transaction['assessment']['nid'];
      $refunded = $transaction['refunded'];

      if (!$refunded && $nid != '2792') {
        $therapist_uid = $transaction['therapist']['uid'];
        $therapists[$therapist_uid]['total_amount'] = $therapists[$therapist_uid]['total_amount'] + $transaction['order']['amount'] + $transaction['order']['rush_amount'];
        $therapists[$therapist_uid]['assessment_count'] = $therapists[$therapist_uid]['assessment_count'] + 1;
        $total_assessments = $total_assessments + 1;
      }
    }
  }

  foreach ($therapists as $therapist) {
    if ($therapist['assessment_count']) {
      $row = array(
        $therapist['name'],
        '$' . number_format($therapist['total_amount'], 2),
        $therapist['assessment_count'],
      );

      $rows[] = $row;
    }

    $total_amount = $total_amount + $therapist['total_amount'];
  }

  $rows[] = array(
    '<b>Total</b>',
    '$' . number_format($total_amount, 2),
    $total_assessments,
  );

  return $build['performance_therapist_transactions_table'] = array(
    '#theme' => 'table',
    '#header' => $header,
    '#rows' => $rows,
    '#empty' => t('No transactions found.'),
    '#caption' => t('<h3>Therapist transactions</h3>'),
  );
}

/**
 * Function to determine if a user only has the client role.
 *
 * For testing purposes some therapists, super admins and developers will also
 * have the client role assigned to them. Sometimes we only need information on
 * clients who are not staff members, which this function is able to determine
 * for us.
 */
function user_has_client_role_only($uid) {
  // Staff role IDs.
  $roles = array(3, 4, 5, 7, 8);

  // User account to check against.
  $user = user_load($uid);
  $user_roles = array_keys($user->roles);

  foreach ($roles as $role) {
    if (in_array($role, $user_roles)) {
      // Return false if user has staff role.
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Function to determine which stats a staff role can view.
 */
function user_can_view_stats() {
  global $user;
  // Staff role IDs.
  $roles = array_keys($user->roles);
  $full_access = in_array(3, $roles) || in_array(7, $roles) || in_array(8, $roles);
  $own_access = in_array(4, $roles);
  $no_access = in_array(5, $roles);

  if ($full_access) {
    return 'all';
  }
  elseif ($own_access) {
    return 'own';
  }
  else {
    return 'none';
  }
}

/**
 * Retrieves all transactions between two given dates.
 *
 * @param string $start_date
 *   Start date (timestamp) to begin transaction query.
 * @param string $end_date
 *   End date (timestamp) to end transaction query.
 *
 * @return array
 *   Returns an array of orders that fall within the start and end dates.
 */
function ndsbs_performance_reports_get_transactions($start_date, $end_date) {
  $query = db_query('SELECT * FROM {users_transactions} ut WHERE ut.payment_status = :payment_status', array(':payment_status' => 1));
  $transactions = $query->fetchAll();
  $orders = array();

  foreach ($transactions as $transaction) {
    $order_date = $transaction->order_date;
    $date_range = $order_date >= $start_date && $order_date <= $end_date;
    $client_role_only = user_has_client_role_only($transaction->uid);

    if ($date_range && $client_role_only) {
      // Basic order information.
      $orders[$transaction->order_id]['payment_status'] = $transaction->payment_status;
      $orders[$transaction->order_id]['refunded'] = FALSE;
      $orders[$transaction->order_id]['transaction_id'] = $transaction->transaction_id;

      // Gets refund_payment node tied to the client, indicating a refund was
      // processed.
      $refund_query = new EntityFieldQuery();
      $entities = $refund_query->entityCondition('entity_type', 'node')
        ->entityCondition('bundle', 'refund_payment')
        ->propertyCondition('uid', $transaction->uid)
        ->execute();
      $refund_nodes = node_load_multiple(array_keys($entities['node']));

      foreach ($refund_nodes as $refund_node) {
        // Determine if transaction was refunded.
        if ($refund_node->field_request_status['und'][0]['value']) {
          $orders[$transaction->order_id]['refunded'] = TRUE;
        }
      }

      // Add assessment details.
      $assessment_node = node_load($transaction->nid);
      $orders[$transaction->order_id]['assessment']['nid'] = $transaction->nid;
      $orders[$transaction->order_id]['assessment']['tid'] = $transaction->tid;
      $orders[$transaction->order_id]['assessment']['title'] = $assessment_node->title;

      // Add client details.
      $client = user_load($transaction->uid);
      $orders[$transaction->order_id]['client']['address']['street'] = $client->field_address['und'][0]['value'];
      $orders[$transaction->order_id]['client']['address']['city'] = $client->field_city['und'][0]['value'];
      $orders[$transaction->order_id]['client']['address']['state'] = $client->field_state['und'][0]['value'];
      $orders[$transaction->order_id]['client']['address']['zip'] = $client->field_zip['und'][0]['value'];
      $orders[$transaction->order_id]['client']['mail'] = $client->mail;
      $orders[$transaction->order_id]['client']['name'] = $client->field_first_name['und'][0]['value'];
      $orders[$transaction->order_id]['client']['name'] .= ' ' . $client->field_last_name['und'][0]['value'];
      $orders[$transaction->order_id]['client']['phone'] = $client->field_phone['und'][0]['value'];
      $orders[$transaction->order_id]['client']['uid'] = $transaction->uid;

      // Add order details.
      $orders[$transaction->order_id]['order']['amount'] = number_format($transaction->cost, 0);
      $orders[$transaction->order_id]['order']['date'] = $transaction->order_date;
      $orders[$transaction->order_id]['order']['date_formatted'] = date('F j, Y', $transaction->order_date);
      $orders[$transaction->order_id]['order']['id'] = $transaction->order_id;
      $orders[$transaction->order_id]['order']['rush_amount'] = number_format($transaction->rush_cost, 0);

      // Add therapist details.
      $therapist = user_load($transaction->therapist);
      if ($therapist) {
        $orders[$transaction->order_id]['therapist']['name'] = $therapist->field_first_name['und'][0]['value'];
        $orders[$transaction->order_id]['therapist']['name'] .= ' ' . $therapist->field_last_name['und'][0]['value'];
        $orders[$transaction->order_id]['therapist']['uid'] = $transaction->therapist;
      }
      else {
        $orders[$transaction->order_id]['therapist']['name'] = 'Unassigned';
        $orders[$transaction->order_id]['therapist']['uid'] = 0;
      }
    }
  }

  return $orders;
}

function ndsbs_performance_reports_get_transactions__assessment_amounts($start_date, $end_date) {
  $transactions = ndsbs_performance_reports_get_transactions($start_date, $end_date);
  $return = 0;

  foreach ($transactions as $transaction) {
    $return = $return + $transaction['order']['amount'];
  }

  return $return;
}

function ndsbs_performance_reports_get_transactions__rush_amounts($start_date, $end_date) {
  $transactions = ndsbs_performance_reports_get_transactions($start_date, $end_date);
  $return = 0;

  foreach ($transactions as $transaction) {
    $return = $return + $transaction['order']['rush_amount'];
  }

  return $return;
}

function ndsbs_performance_reports_get_transactions__refund_amounts($start_date, $end_date) {
  $transactions = ndsbs_performance_reports_get_transactions($start_date, $end_date);
  $return = 0;

  foreach ($transactions as $transaction) {
    if ($transaction['refunded']) {
      $return = $return + $transaction['order']['amount'];
    }
  }

  return $return;
}

function ndsbs_performance_reports_get_transactions__all_amounts($start_date, $end_date) {
  $assessments = ndsbs_performance_reports_get_transactions__assessment_amounts($start_date, $end_date);
  $rush = ndsbs_performance_reports_get_transactions__rush_amounts($start_date, $end_date);
  $refunds = ndsbs_performance_reports_get_transactions__refund_amounts($start_date, $end_date);

  return $assessments + $rush - $refunds;
}

function ndsbs_performance_reports_get_all_therapists() {
  $therapists = array(
    0 => array(
      'uid' => 0,
      'name' => 'Unassigned',
    ),
  );

  $query = db_select('users', 'u');
  $query->fields('u', array('uid'))
    ->condition('u.status', 1, '=')
    ->orderBy('u.uid', 'ASC');
  $query->join('users_roles', 'users_roles', 'users_roles.uid = u.uid');
  $query->condition('users_roles.rid', 4, '=');
  $result = $query->execute();
  $users = $result->fetchAll();

  foreach ($users as $user) {
    $userObj = user_load($user->uid);
    $therapists[$userObj->uid]['uid'] = $userObj->uid;
    $therapists[$userObj->uid]['name'] = $userObj->field_first_name['und'][0]['value'];
    $therapists[$userObj->uid]['name'] .= ' ' . $userObj->field_last_name['und'][0]['value'];
  }

  return $therapists;
}
